// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StructuredMarket.Infrastructure.Data;

#nullable disable

namespace StructuredMarket.Infrastructure.Migrations
{
    [DbContext(typeof(StructuredMarketDbContext))]
    [Migration("20250223224450_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01572fc3-c799-4fe7-9734-5b220d18e731"),
                            DeliveryAddress = "123 Main St, City",
                            DeliveryTime = new DateTime(2025, 2, 26, 22, 44, 49, 887, DateTimeKind.Utc).AddTicks(9215),
                            TotalAmount = 1700.00m,
                            UserId = new Guid("78e75da3-69b3-4e21-bc9e-27e3637ee72e")
                        },
                        new
                        {
                            Id = new Guid("be75656f-ffd4-44a3-89de-c5a2969b989e"),
                            DeliveryAddress = "456 Elm St, Town",
                            DeliveryTime = new DateTime(2025, 2, 28, 22, 44, 49, 887, DateTimeKind.Utc).AddTicks(9393),
                            TotalAmount = 1100.00m,
                            UserId = new Guid("78e75da3-69b3-4e21-bc9e-27e3637ee72e")
                        });
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f96168d4-b490-4c7d-a9bc-e8bfb209e9dd"),
                            OrderId = new Guid("01572fc3-c799-4fe7-9734-5b220d18e731"),
                            ProductId = new Guid("e7060eeb-1fc5-4709-a780-04fff8005178"),
                            Quantity = 1,
                            UnitPrice = 0m
                        },
                        new
                        {
                            Id = new Guid("72de081c-f91d-4493-81bb-3a34f5088db6"),
                            OrderId = new Guid("01572fc3-c799-4fe7-9734-5b220d18e731"),
                            ProductId = new Guid("a4d28344-539a-4b10-bd45-8ac46fe01d55"),
                            Quantity = 1,
                            UnitPrice = 0m
                        },
                        new
                        {
                            Id = new Guid("6891c06d-3d53-4dc6-a6c0-bdbe5f10f582"),
                            OrderId = new Guid("be75656f-ffd4-44a3-89de-c5a2969b989e"),
                            ProductId = new Guid("515e109a-c1bf-4c53-9221-6995b978631e"),
                            Quantity = 1,
                            UnitPrice = 0m
                        });
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Merchant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7060eeb-1fc5-4709-a780-04fff8005178"),
                            Description = "",
                            Image = "",
                            Merchant = "",
                            Name = "Laptop",
                            Price = 1500.00m
                        },
                        new
                        {
                            Id = new Guid("515e109a-c1bf-4c53-9221-6995b978631e"),
                            Description = "",
                            Image = "",
                            Merchant = "",
                            Name = "Smartphone",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = new Guid("a4d28344-539a-4b10-bd45-8ac46fe01d55"),
                            Description = "",
                            Image = "",
                            Merchant = "",
                            Name = "Headphones",
                            Price = 200.00m
                        },
                        new
                        {
                            Id = new Guid("2cac038b-e99b-4b66-a6d3-8e983a49d4c5"),
                            Description = "",
                            Image = "",
                            Merchant = "",
                            Name = "Smartwatch",
                            Price = 300.00m
                        });
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78e75da3-69b3-4e21-bc9e-27e3637ee72e"),
                            Email = "nada@gmail.com",
                            FirstName = "nada",
                            LastName = "mohamed",
                            PasswordHash = "lK93K78vTMYYLwk0C/ccytNjZ8GXIXpuda/rE98OCe5wV2F6uI5HX3cqUHZtZZFi",
                            Phone = "123456789",
                            Username = "nadaMohamed"
                        });
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Order", b =>
                {
                    b.HasOne("StructuredMarket.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("StructuredMarket.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StructuredMarket.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("StructuredMarket.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StructuredMarket.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("StructuredMarket.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StructuredMarket.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("StructuredMarket.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
